"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Drive_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Core/Drive"));
const Application_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Core/Application"));
const Env_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Core/Env"));
const airtable_1 = __importDefault(require("airtable"));
const got_1 = __importDefault(require("got"));
const Solvers_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Solvers"));
const base = new airtable_1.default({ apiKey: Env_1.default.get('AIRTABLE_KEY') }).base(Env_1.default.get('AIRTABLE_BASE'));
const tableName = 'Days';
const useCache = false;
class DaysController {
    async index({ response, params, request }) {
        const urlQueries = request.qs();
        const { yearName } = params;
        const records = await base(tableName)
            .select({ filterByFormula: `yearName="${yearName}"` })
            .firstPage();
        return response.send({ urlQueries, totalRecords: records.length, records });
    }
    async show({ params, response }) {
        const { yearName, name } = params;
        let localPath = Application_1.default.tmpPath(`inputs/day-${yearName}-${name.padStart(2, '0')}.json`);
        let day;
        if (useCache) {
            try {
                const fileBuffer = await Drive_1.default.get(localPath);
                day = JSON.parse(fileBuffer.toString());
            }
            catch (e) {
                console.info('Day data not cached, file will be loaded from Airtable');
            }
        }
        if (!day) {
            try {
                const page = await base(tableName)
                    .select({
                    filterByFormula: `AND(name="${name}",yearName="${yearName}")`,
                })
                    .firstPage();
                day = page[0];
            }
            catch (e) {
                console.error(e);
            }
        }
        if (day) {
            await Drive_1.default.put(localPath, JSON.stringify(day));
            if (day.fields.inputs && Array.isArray(day.fields.inputs)) {
                const dayName = day.fields.name ?? '';
                const inputs = day.fields.inputs.map(({ filename, url }) => ({
                    filename,
                    url,
                    isOgInput: filename === 'input.txt',
                }));
                const defaultInputData = inputs.find((input) => input.isOgInput);
                if (!defaultInputData) {
                    throw new Error(`No default input found for Day ${dayName}. ðŸ¤·`);
                }
                const input = await (0, got_1.default)(defaultInputData.url).text();
                const daySolvers = Solvers_1.default[`day${dayName.toString().padStart(2, '0')}`];
                let part1 = {};
                let part2 = {};
                if (typeof daySolvers !== 'undefined') {
                    part1 = { answer: await daySolvers.solvePart1(input) };
                    part2 = { answer: await daySolvers.solvePart2(input) };
                }
                return response.send({ part1, part2, ...day });
            }
            throw new Error(`No inputs found for Day ${day.fields.name}. ðŸ¤·`);
        }
        return response.safeStatus(404).send(`Sorry, no data found for ${name}/${yearName}. ðŸ˜”`);
    }
}
exports.default = DaysController;
//# sourceMappingURL=data:application/json;base64,