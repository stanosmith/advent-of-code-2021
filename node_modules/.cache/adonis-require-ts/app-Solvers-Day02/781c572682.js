"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.solvePart2 = exports.solvePart1 = void 0;
const solvePart1 = async (input) => {
    const positionAndDepth = input
        .split('\n')
        .filter((value) => value !== '')
        .map((value) => value.trim())
        .reduce((finalPositionAndDepth, value) => {
        const [command, units] = value.split(' ');
        const parsedUnits = parseInt(units);
        switch (command) {
            case 'up':
                return {
                    ...finalPositionAndDepth,
                    depth: finalPositionAndDepth.depth - parsedUnits,
                };
            case 'down':
                return {
                    ...finalPositionAndDepth,
                    depth: finalPositionAndDepth.depth + parsedUnits,
                };
            case 'forward':
            default:
                return {
                    ...finalPositionAndDepth,
                    horizontalPosition: finalPositionAndDepth.horizontalPosition + parsedUnits,
                };
        }
    }, {
        horizontalPosition: 0,
        depth: 0,
    });
    return positionAndDepth.horizontalPosition * positionAndDepth.depth;
};
exports.solvePart1 = solvePart1;
const solvePart2 = async (input) => {
    const positionDepthAndAim = input
        .split('\n')
        .filter((value) => value !== '')
        .map((value) => value.trim())
        .reduce((finalPositionAndDepth, value) => {
        const [command, units] = value.split(' ');
        const parsedUnits = parseInt(units);
        switch (command) {
            case 'up':
                return {
                    ...finalPositionAndDepth,
                    aim: finalPositionAndDepth.aim - parsedUnits,
                };
            case 'down':
                return {
                    ...finalPositionAndDepth,
                    aim: finalPositionAndDepth.aim + parsedUnits,
                };
            case 'forward':
            default:
                return {
                    ...finalPositionAndDepth,
                    horizontalPosition: finalPositionAndDepth.horizontalPosition + parsedUnits,
                    depth: finalPositionAndDepth.depth + finalPositionAndDepth.aim * parsedUnits,
                };
        }
    }, {
        aim: 0,
        horizontalPosition: 0,
        depth: 0,
    });
    return positionDepthAndAim.horizontalPosition * positionDepthAndAim.depth;
};
exports.solvePart2 = solvePart2;
exports.default = {
    solvePart1: exports.solvePart1,
    solvePart2: exports.solvePart2,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGF5MDIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJEYXkwMi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBTyxNQUFNLFVBQVUsR0FBRyxLQUFLLEVBQUUsS0FBYSxFQUFFLEVBQUU7SUFPaEQsTUFBTSxnQkFBZ0IsR0FBRyxLQUFLO1NBQzNCLEtBQUssQ0FBQyxJQUFJLENBQUM7U0FDWCxNQUFNLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEtBQUssS0FBSyxFQUFFLENBQUM7U0FDL0IsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDNUIsTUFBTSxDQUNMLENBQUMscUJBQXFCLEVBQUUsS0FBSyxFQUFFLEVBQUU7UUFDL0IsTUFBTSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQ3pDLE1BQU0sV0FBVyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQUVuQyxRQUFRLE9BQU8sRUFBRTtZQUNmLEtBQUssSUFBSTtnQkFDUCxPQUFPO29CQUNMLEdBQUcscUJBQXFCO29CQUN4QixLQUFLLEVBQUUscUJBQXFCLENBQUMsS0FBSyxHQUFHLFdBQVc7aUJBQ2pELENBQUE7WUFDSCxLQUFLLE1BQU07Z0JBQ1QsT0FBTztvQkFDTCxHQUFHLHFCQUFxQjtvQkFDeEIsS0FBSyxFQUFFLHFCQUFxQixDQUFDLEtBQUssR0FBRyxXQUFXO2lCQUNqRCxDQUFBO1lBQ0gsS0FBSyxTQUFTLENBQUM7WUFDZjtnQkFDRSxPQUFPO29CQUNMLEdBQUcscUJBQXFCO29CQUN4QixrQkFBa0IsRUFBRSxxQkFBcUIsQ0FBQyxrQkFBa0IsR0FBRyxXQUFXO2lCQUMzRSxDQUFBO1NBQ0o7SUFDSCxDQUFDLEVBQ0Q7UUFDRSxrQkFBa0IsRUFBRSxDQUFDO1FBQ3JCLEtBQUssRUFBRSxDQUFDO0tBQ1QsQ0FDRixDQUFBO0lBRUgsT0FBTyxnQkFBZ0IsQ0FBQyxrQkFBa0IsR0FBRyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUE7QUFDckUsQ0FBQyxDQUFBO0FBMUNZLFFBQUEsVUFBVSxjQTBDdEI7QUFFTSxNQUFNLFVBQVUsR0FBRyxLQUFLLEVBQUUsS0FBYSxFQUFFLEVBQUU7SUFPaEQsTUFBTSxtQkFBbUIsR0FBRyxLQUFLO1NBQzlCLEtBQUssQ0FBQyxJQUFJLENBQUM7U0FDWCxNQUFNLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEtBQUssS0FBSyxFQUFFLENBQUM7U0FDL0IsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDNUIsTUFBTSxDQUNMLENBQUMscUJBQXFCLEVBQUUsS0FBSyxFQUFFLEVBQUU7UUFDL0IsTUFBTSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQ3pDLE1BQU0sV0FBVyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQUVuQyxRQUFRLE9BQU8sRUFBRTtZQUNmLEtBQUssSUFBSTtnQkFDUCxPQUFPO29CQUNMLEdBQUcscUJBQXFCO29CQUV4QixHQUFHLEVBQUUscUJBQXFCLENBQUMsR0FBRyxHQUFHLFdBQVc7aUJBQzdDLENBQUE7WUFDSCxLQUFLLE1BQU07Z0JBQ1QsT0FBTztvQkFDTCxHQUFHLHFCQUFxQjtvQkFFeEIsR0FBRyxFQUFFLHFCQUFxQixDQUFDLEdBQUcsR0FBRyxXQUFXO2lCQUM3QyxDQUFBO1lBQ0gsS0FBSyxTQUFTLENBQUM7WUFDZjtnQkFDRSxPQUFPO29CQUNMLEdBQUcscUJBQXFCO29CQUN4QixrQkFBa0IsRUFBRSxxQkFBcUIsQ0FBQyxrQkFBa0IsR0FBRyxXQUFXO29CQUMxRSxLQUFLLEVBQUUscUJBQXFCLENBQUMsS0FBSyxHQUFHLHFCQUFxQixDQUFDLEdBQUcsR0FBRyxXQUFXO2lCQUM3RSxDQUFBO1NBQ0o7SUFDSCxDQUFDLEVBQ0Q7UUFDRSxHQUFHLEVBQUUsQ0FBQztRQUNOLGtCQUFrQixFQUFFLENBQUM7UUFDckIsS0FBSyxFQUFFLENBQUM7S0FDVCxDQUNGLENBQUE7SUFFSCxPQUFPLG1CQUFtQixDQUFDLGtCQUFrQixHQUFHLG1CQUFtQixDQUFDLEtBQUssQ0FBQTtBQUMzRSxDQUFDLENBQUE7QUE5Q1ksUUFBQSxVQUFVLGNBOEN0QjtBQUVELGtCQUFlO0lBQ2IsVUFBVSxFQUFWLGtCQUFVO0lBQ1YsVUFBVSxFQUFWLGtCQUFVO0NBQ1gsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBzb2x2ZVBhcnQxID0gYXN5bmMgKGlucHV0OiBzdHJpbmcpID0+IHtcbiAgLy8gICBpbnB1dCA9IGBmb3J3YXJkIDVcbiAgLy8gZG93biA1XG4gIC8vIGZvcndhcmQgOFxuICAvLyB1cCAzXG4gIC8vIGRvd24gOFxuICAvLyBmb3J3YXJkIDJgXG4gIGNvbnN0IHBvc2l0aW9uQW5kRGVwdGggPSBpbnB1dFxuICAgIC5zcGxpdCgnXFxuJylcbiAgICAuZmlsdGVyKCh2YWx1ZSkgPT4gdmFsdWUgIT09ICcnKVxuICAgIC5tYXAoKHZhbHVlKSA9PiB2YWx1ZS50cmltKCkpXG4gICAgLnJlZHVjZShcbiAgICAgIChmaW5hbFBvc2l0aW9uQW5kRGVwdGgsIHZhbHVlKSA9PiB7XG4gICAgICAgIGNvbnN0IFtjb21tYW5kLCB1bml0c10gPSB2YWx1ZS5zcGxpdCgnICcpXG4gICAgICAgIGNvbnN0IHBhcnNlZFVuaXRzID0gcGFyc2VJbnQodW5pdHMpXG5cbiAgICAgICAgc3dpdGNoIChjb21tYW5kKSB7XG4gICAgICAgICAgY2FzZSAndXAnOlxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgLi4uZmluYWxQb3NpdGlvbkFuZERlcHRoLFxuICAgICAgICAgICAgICBkZXB0aDogZmluYWxQb3NpdGlvbkFuZERlcHRoLmRlcHRoIC0gcGFyc2VkVW5pdHMsXG4gICAgICAgICAgICB9XG4gICAgICAgICAgY2FzZSAnZG93bic6XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAuLi5maW5hbFBvc2l0aW9uQW5kRGVwdGgsXG4gICAgICAgICAgICAgIGRlcHRoOiBmaW5hbFBvc2l0aW9uQW5kRGVwdGguZGVwdGggKyBwYXJzZWRVbml0cyxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBjYXNlICdmb3J3YXJkJzpcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgLi4uZmluYWxQb3NpdGlvbkFuZERlcHRoLFxuICAgICAgICAgICAgICBob3Jpem9udGFsUG9zaXRpb246IGZpbmFsUG9zaXRpb25BbmREZXB0aC5ob3Jpem9udGFsUG9zaXRpb24gKyBwYXJzZWRVbml0cyxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaG9yaXpvbnRhbFBvc2l0aW9uOiAwLFxuICAgICAgICBkZXB0aDogMCxcbiAgICAgIH1cbiAgICApXG5cbiAgcmV0dXJuIHBvc2l0aW9uQW5kRGVwdGguaG9yaXpvbnRhbFBvc2l0aW9uICogcG9zaXRpb25BbmREZXB0aC5kZXB0aFxufVxuXG5leHBvcnQgY29uc3Qgc29sdmVQYXJ0MiA9IGFzeW5jIChpbnB1dDogc3RyaW5nKSA9PiB7XG4gIC8vIGlucHV0ID0gYGZvcndhcmQgNVxuICAvLyBkb3duIDVcbiAgLy8gZm9yd2FyZCA4XG4gIC8vIHVwIDNcbiAgLy8gZG93biA4XG4gIC8vIGZvcndhcmQgMmBcbiAgY29uc3QgcG9zaXRpb25EZXB0aEFuZEFpbSA9IGlucHV0XG4gICAgLnNwbGl0KCdcXG4nKVxuICAgIC5maWx0ZXIoKHZhbHVlKSA9PiB2YWx1ZSAhPT0gJycpXG4gICAgLm1hcCgodmFsdWUpID0+IHZhbHVlLnRyaW0oKSlcbiAgICAucmVkdWNlKFxuICAgICAgKGZpbmFsUG9zaXRpb25BbmREZXB0aCwgdmFsdWUpID0+IHtcbiAgICAgICAgY29uc3QgW2NvbW1hbmQsIHVuaXRzXSA9IHZhbHVlLnNwbGl0KCcgJylcbiAgICAgICAgY29uc3QgcGFyc2VkVW5pdHMgPSBwYXJzZUludCh1bml0cylcblxuICAgICAgICBzd2l0Y2ggKGNvbW1hbmQpIHtcbiAgICAgICAgICBjYXNlICd1cCc6XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAuLi5maW5hbFBvc2l0aW9uQW5kRGVwdGgsXG4gICAgICAgICAgICAgIC8vIGRlcHRoOiBmaW5hbFBvc2l0aW9uQW5kRGVwdGguZGVwdGggLSBwYXJzZWRVbml0cyxcbiAgICAgICAgICAgICAgYWltOiBmaW5hbFBvc2l0aW9uQW5kRGVwdGguYWltIC0gcGFyc2VkVW5pdHMsXG4gICAgICAgICAgICB9XG4gICAgICAgICAgY2FzZSAnZG93bic6XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAuLi5maW5hbFBvc2l0aW9uQW5kRGVwdGgsXG4gICAgICAgICAgICAgIC8vIGRlcHRoOiBmaW5hbFBvc2l0aW9uQW5kRGVwdGguZGVwdGggKyBwYXJzZWRVbml0cyxcbiAgICAgICAgICAgICAgYWltOiBmaW5hbFBvc2l0aW9uQW5kRGVwdGguYWltICsgcGFyc2VkVW5pdHMsXG4gICAgICAgICAgICB9XG4gICAgICAgICAgY2FzZSAnZm9yd2FyZCc6XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIC4uLmZpbmFsUG9zaXRpb25BbmREZXB0aCxcbiAgICAgICAgICAgICAgaG9yaXpvbnRhbFBvc2l0aW9uOiBmaW5hbFBvc2l0aW9uQW5kRGVwdGguaG9yaXpvbnRhbFBvc2l0aW9uICsgcGFyc2VkVW5pdHMsXG4gICAgICAgICAgICAgIGRlcHRoOiBmaW5hbFBvc2l0aW9uQW5kRGVwdGguZGVwdGggKyBmaW5hbFBvc2l0aW9uQW5kRGVwdGguYWltICogcGFyc2VkVW5pdHMsXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGFpbTogMCxcbiAgICAgICAgaG9yaXpvbnRhbFBvc2l0aW9uOiAwLFxuICAgICAgICBkZXB0aDogMCxcbiAgICAgIH1cbiAgICApXG4gIC8vIHJldHVybiBwb3NpdGlvbkRlcHRoQW5kQWltXG4gIHJldHVybiBwb3NpdGlvbkRlcHRoQW5kQWltLmhvcml6b250YWxQb3NpdGlvbiAqIHBvc2l0aW9uRGVwdGhBbmRBaW0uZGVwdGhcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBzb2x2ZVBhcnQxLFxuICBzb2x2ZVBhcnQyLFxufVxuIl19