"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.solvePart2 = exports.solvePart1 = void 0;
const solvePart1 = async (input) => {
    const inputArray = input.split('\n');
    const gammaRate = getGammaRate(inputArray);
    const epsilonRate = getEpsilonRate(inputArray);
    return gammaRate * epsilonRate;
};
exports.solvePart1 = solvePart1;
function getGammaRate(input) {
    const gammaBinary = input
        .map((value) => value.split('').map((bit) => parseInt(bit)))
        .reduce((mostCommonOuter, currentBits, index, allBits) => {
        if (index < currentBits.length) {
            const { zero, one } = allBits
                .map((bits) => bits[index])
                .reduce((mostCommonInner, bit) => {
                const key = bit === 0 ? 'zero' : 'one';
                return {
                    ...mostCommonInner,
                    [key]: mostCommonInner[key] + 1,
                };
            }, { zero: 0, one: 0 });
            if (zero > one) {
                return [...mostCommonOuter, 0];
            }
            return [...mostCommonOuter, 1];
        }
        return mostCommonOuter;
    }, [])
        .join('');
    return parseInt(gammaBinary, 2);
}
function getEpsilonRate(input) {
    const epsilonBinary = input
        .map((value) => value.split('').map((bit) => parseInt(bit)))
        .reduce((mostCommonOuter, currentBits, index, allBits) => {
        if (index < currentBits.length) {
            const { zero, one } = allBits
                .map((bits) => bits[index])
                .reduce((mostCommonInner, bit) => {
                const key = bit === 0 ? 'zero' : 'one';
                return {
                    ...mostCommonInner,
                    [key]: mostCommonInner[key] + 1,
                };
            }, { zero: 0, one: 0 });
            if (zero > one) {
                return [...mostCommonOuter, 1];
            }
            return [...mostCommonOuter, 0];
        }
        return mostCommonOuter;
    }, [])
        .join('');
    return parseInt(epsilonBinary, 2);
}
const solvePart2 = async (input) => {
    input = `00100
11110
10110
10111
10101
01111
00111
11100
10000
11001
00010
01010`;
    return input.split('\n');
};
exports.solvePart2 = solvePart2;
exports.default = {
    solvePart1: exports.solvePart1,
    solvePart2: exports.solvePart2,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGF5MDMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJEYXkwMy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBTyxNQUFNLFVBQVUsR0FBRyxLQUFLLEVBQUUsS0FBYSxFQUFFLEVBQUU7SUFhaEQsTUFBTSxVQUFVLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUVwQyxNQUFNLFNBQVMsR0FBRyxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUE7SUFDMUMsTUFBTSxXQUFXLEdBQUcsY0FBYyxDQUFDLFVBQVUsQ0FBQyxDQUFBO0lBSTlDLE9BQU8sU0FBUyxHQUFHLFdBQVcsQ0FBQTtBQUNoQyxDQUFDLENBQUE7QUFyQlksUUFBQSxVQUFVLGNBcUJ0QjtBQUVELFNBQVMsWUFBWSxDQUFDLEtBQUs7SUFDekIsTUFBTSxXQUFXLEdBQUcsS0FBSztTQUN0QixHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztTQUMzRCxNQUFNLENBQUMsQ0FBQyxlQUFlLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsRUFBRTtRQUN2RCxJQUFJLEtBQUssR0FBRyxXQUFXLENBQUMsTUFBTSxFQUFFO1lBQzlCLE1BQU0sRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEdBQUcsT0FBTztpQkFDMUIsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7aUJBQzFCLE1BQU0sQ0FDTCxDQUFDLGVBQWUsRUFBRSxHQUFHLEVBQUUsRUFBRTtnQkFDdkIsTUFBTSxHQUFHLEdBQUcsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUE7Z0JBQ3RDLE9BQU87b0JBQ0wsR0FBRyxlQUFlO29CQUNsQixDQUFDLEdBQUcsQ0FBQyxFQUFFLGVBQWUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDO2lCQUNoQyxDQUFBO1lBQ0gsQ0FBQyxFQUNELEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQ3BCLENBQUE7WUFFSCxJQUFJLElBQUksR0FBRyxHQUFHLEVBQUU7Z0JBQ2QsT0FBTyxDQUFDLEdBQUcsZUFBZSxFQUFFLENBQUMsQ0FBQyxDQUFBO2FBQy9CO1lBQ0QsT0FBTyxDQUFDLEdBQUcsZUFBZSxFQUFFLENBQUMsQ0FBQyxDQUFBO1NBQy9CO1FBQ0QsT0FBTyxlQUFlLENBQUE7SUFDeEIsQ0FBQyxFQUFFLEVBQUUsQ0FBQztTQUNMLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUNYLE9BQU8sUUFBUSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQTtBQUNqQyxDQUFDO0FBRUQsU0FBUyxjQUFjLENBQUMsS0FBSztJQUMzQixNQUFNLGFBQWEsR0FBRyxLQUFLO1NBQ3hCLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQzNELE1BQU0sQ0FBQyxDQUFDLGVBQWUsRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxFQUFFO1FBQ3ZELElBQUksS0FBSyxHQUFHLFdBQVcsQ0FBQyxNQUFNLEVBQUU7WUFDOUIsTUFBTSxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsR0FBRyxPQUFPO2lCQUMxQixHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztpQkFDMUIsTUFBTSxDQUNMLENBQUMsZUFBZSxFQUFFLEdBQUcsRUFBRSxFQUFFO2dCQUN2QixNQUFNLEdBQUcsR0FBRyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQTtnQkFDdEMsT0FBTztvQkFDTCxHQUFHLGVBQWU7b0JBQ2xCLENBQUMsR0FBRyxDQUFDLEVBQUUsZUFBZSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUM7aUJBQ2hDLENBQUE7WUFDSCxDQUFDLEVBQ0QsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FDcEIsQ0FBQTtZQUVILElBQUksSUFBSSxHQUFHLEdBQUcsRUFBRTtnQkFDZCxPQUFPLENBQUMsR0FBRyxlQUFlLEVBQUUsQ0FBQyxDQUFDLENBQUE7YUFDL0I7WUFDRCxPQUFPLENBQUMsR0FBRyxlQUFlLEVBQUUsQ0FBQyxDQUFDLENBQUE7U0FDL0I7UUFDRCxPQUFPLGVBQWUsQ0FBQTtJQUN4QixDQUFDLEVBQUUsRUFBRSxDQUFDO1NBQ0wsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBQ1gsT0FBTyxRQUFRLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQyxDQUFBO0FBQ25DLENBQUM7QUFFTSxNQUFNLFVBQVUsR0FBRyxLQUFLLEVBQUUsS0FBYSxFQUFFLEVBQUU7SUFDaEQsS0FBSyxHQUFHOzs7Ozs7Ozs7OztNQVdKLENBQUE7SUFDSixPQUFPLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUE7QUFDMUIsQ0FBQyxDQUFBO0FBZFksUUFBQSxVQUFVLGNBY3RCO0FBRUQsa0JBQWU7SUFDYixVQUFVLEVBQVYsa0JBQVU7SUFDVixVQUFVLEVBQVYsa0JBQVU7Q0FDWCxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IHNvbHZlUGFydDEgPSBhc3luYyAoaW5wdXQ6IHN0cmluZykgPT4ge1xuICAvLyAgIGNvbnN0IGlucHV0QXJyYXkgPSBgMDAxMDBcbiAgLy8gMTExMTBcbiAgLy8gMTAxMTBcbiAgLy8gMTAxMTFcbiAgLy8gMTAxMDFcbiAgLy8gMDExMTFcbiAgLy8gMDAxMTFcbiAgLy8gMTExMDBcbiAgLy8gMTAwMDBcbiAgLy8gMTEwMDFcbiAgLy8gMDAwMTBcbiAgLy8gMDEwMTBgXG4gIGNvbnN0IGlucHV0QXJyYXkgPSBpbnB1dC5zcGxpdCgnXFxuJylcblxuICBjb25zdCBnYW1tYVJhdGUgPSBnZXRHYW1tYVJhdGUoaW5wdXRBcnJheSlcbiAgY29uc3QgZXBzaWxvblJhdGUgPSBnZXRFcHNpbG9uUmF0ZShpbnB1dEFycmF5KVxuXG4gIC8vIHJldHVybiBnYW1tYVJhdGVcbiAgLy8gcmV0dXJuIGVwc2lsb25SYXRlXG4gIHJldHVybiBnYW1tYVJhdGUgKiBlcHNpbG9uUmF0ZVxufVxuXG5mdW5jdGlvbiBnZXRHYW1tYVJhdGUoaW5wdXQpIHtcbiAgY29uc3QgZ2FtbWFCaW5hcnkgPSBpbnB1dFxuICAgIC5tYXAoKHZhbHVlKSA9PiB2YWx1ZS5zcGxpdCgnJykubWFwKChiaXQpID0+IHBhcnNlSW50KGJpdCkpKVxuICAgIC5yZWR1Y2UoKG1vc3RDb21tb25PdXRlciwgY3VycmVudEJpdHMsIGluZGV4LCBhbGxCaXRzKSA9PiB7XG4gICAgICBpZiAoaW5kZXggPCBjdXJyZW50Qml0cy5sZW5ndGgpIHtcbiAgICAgICAgY29uc3QgeyB6ZXJvLCBvbmUgfSA9IGFsbEJpdHNcbiAgICAgICAgICAubWFwKChiaXRzKSA9PiBiaXRzW2luZGV4XSlcbiAgICAgICAgICAucmVkdWNlKFxuICAgICAgICAgICAgKG1vc3RDb21tb25Jbm5lciwgYml0KSA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IGtleSA9IGJpdCA9PT0gMCA/ICd6ZXJvJyA6ICdvbmUnXG4gICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgLi4ubW9zdENvbW1vbklubmVyLFxuICAgICAgICAgICAgICAgIFtrZXldOiBtb3N0Q29tbW9uSW5uZXJba2V5XSArIDEsXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7IHplcm86IDAsIG9uZTogMCB9XG4gICAgICAgICAgKVxuXG4gICAgICAgIGlmICh6ZXJvID4gb25lKSB7XG4gICAgICAgICAgcmV0dXJuIFsuLi5tb3N0Q29tbW9uT3V0ZXIsIDBdXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFsuLi5tb3N0Q29tbW9uT3V0ZXIsIDFdXG4gICAgICB9XG4gICAgICByZXR1cm4gbW9zdENvbW1vbk91dGVyXG4gICAgfSwgW10pXG4gICAgLmpvaW4oJycpXG4gIHJldHVybiBwYXJzZUludChnYW1tYUJpbmFyeSwgMilcbn1cblxuZnVuY3Rpb24gZ2V0RXBzaWxvblJhdGUoaW5wdXQpIHtcbiAgY29uc3QgZXBzaWxvbkJpbmFyeSA9IGlucHV0XG4gICAgLm1hcCgodmFsdWUpID0+IHZhbHVlLnNwbGl0KCcnKS5tYXAoKGJpdCkgPT4gcGFyc2VJbnQoYml0KSkpXG4gICAgLnJlZHVjZSgobW9zdENvbW1vbk91dGVyLCBjdXJyZW50Qml0cywgaW5kZXgsIGFsbEJpdHMpID0+IHtcbiAgICAgIGlmIChpbmRleCA8IGN1cnJlbnRCaXRzLmxlbmd0aCkge1xuICAgICAgICBjb25zdCB7IHplcm8sIG9uZSB9ID0gYWxsQml0c1xuICAgICAgICAgIC5tYXAoKGJpdHMpID0+IGJpdHNbaW5kZXhdKVxuICAgICAgICAgIC5yZWR1Y2UoXG4gICAgICAgICAgICAobW9zdENvbW1vbklubmVyLCBiaXQpID0+IHtcbiAgICAgICAgICAgICAgY29uc3Qga2V5ID0gYml0ID09PSAwID8gJ3plcm8nIDogJ29uZSdcbiAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5tb3N0Q29tbW9uSW5uZXIsXG4gICAgICAgICAgICAgICAgW2tleV06IG1vc3RDb21tb25Jbm5lcltrZXldICsgMSxcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHsgemVybzogMCwgb25lOiAwIH1cbiAgICAgICAgICApXG5cbiAgICAgICAgaWYgKHplcm8gPiBvbmUpIHtcbiAgICAgICAgICByZXR1cm4gWy4uLm1vc3RDb21tb25PdXRlciwgMV1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gWy4uLm1vc3RDb21tb25PdXRlciwgMF1cbiAgICAgIH1cbiAgICAgIHJldHVybiBtb3N0Q29tbW9uT3V0ZXJcbiAgICB9LCBbXSlcbiAgICAuam9pbignJylcbiAgcmV0dXJuIHBhcnNlSW50KGVwc2lsb25CaW5hcnksIDIpXG59XG5cbmV4cG9ydCBjb25zdCBzb2x2ZVBhcnQyID0gYXN5bmMgKGlucHV0OiBzdHJpbmcpID0+IHtcbiAgaW5wdXQgPSBgMDAxMDBcbjExMTEwXG4xMDExMFxuMTAxMTFcbjEwMTAxXG4wMTExMVxuMDAxMTFcbjExMTAwXG4xMDAwMFxuMTEwMDFcbjAwMDEwXG4wMTAxMGBcbiAgcmV0dXJuIGlucHV0LnNwbGl0KCdcXG4nKVxufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHNvbHZlUGFydDEsXG4gIHNvbHZlUGFydDIsXG59XG4iXX0=