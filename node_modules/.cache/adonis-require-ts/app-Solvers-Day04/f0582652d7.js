"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.solvePart2 = exports.solvePart1 = void 0;
const solvePart1 = async (input) => {
    const numbersDrawn = input
        .split('\n')[0]
        .split(',')
        .map((number) => parseInt(number));
    let boards = [];
    let boardIndex = 0;
    input
        .split('\n')
        .slice(2)
        .forEach((numbersRow) => {
        if (numbersRow === '') {
            boardIndex++;
        }
        else {
            const numbers = numbersRow
                .split(' ')
                .filter((value) => value !== '')
                .map((value) => ({ value: parseInt(value), isMarked: false }));
            const currentBoard = boards[boardIndex];
            let row = [numbers];
            if (currentBoard) {
                row = [...currentBoard, numbers];
            }
            boards[boardIndex] = row;
        }
    });
    let winningBoardSum = 0;
    let winningNumber = -1;
    let markedBoards = [];
    for (let i = 0; i < numbersDrawn.length; i++) {
        const drawnNumber = numbersDrawn[i];
        if (markedBoards.length === 0) {
            markedBoards = boards.map(markBoard.bind(null, drawnNumber));
        }
        else {
            markedBoards = markedBoards.map(markBoard.bind(null, drawnNumber));
        }
        winningBoardSum = getWinningBoardSum(markedBoards);
        if (winningBoardSum > 0) {
            winningNumber = drawnNumber;
            break;
        }
    }
    return { winningNumber, winningBoardSum, totalScore: winningBoardSum * winningNumber };
};
exports.solvePart1 = solvePart1;
function markBoard(value, board) {
    return board.map((row) => {
        return row.map((spot) => {
            if (!spot.isMarked) {
                return { ...spot, isMarked: spot.value === value };
            }
            return spot;
        });
    });
}
function getWinningBoardSum(markedBoards) {
    return (markedBoards
        .map((board) => {
        return board
            .map((row, rowIndex, allRows) => {
            return {
                board,
                rowLength: row.length,
                rowFiltered: row.filter(isSpotMarked),
                columnFiltered: getColumn(rowIndex, allRows).filter(isSpotMarked),
            };
        })
            .filter((rowAndColumn) => {
            const allSpotsMarkedRow = rowAndColumn.rowFiltered.length === rowAndColumn.rowLength;
            const allSpotsMarkedColumn = rowAndColumn.columnFiltered.length === rowAndColumn.rowLength;
            return allSpotsMarkedRow || allSpotsMarkedColumn;
        });
    })
        .filter((board) => board.length !== 0)
        .flat(2)
        .map(({ board }) => {
        return board
            .flat(2)
            .filter((spot) => !spot.isMarked)
            .map((spot) => spot.value)
            .reduce((sum, value) => sum + value, 0);
    })
        .reduce((_sum, value) => value, 0));
}
function getColumn(rowIndex, allRows) {
    let column = [];
    for (let i = 0; i < allRows.length; i++) {
        column.push(allRows[i][rowIndex]);
    }
    return column;
}
function isSpotMarked(spot) {
    return spot.isMarked;
}
const solvePart2 = async (input) => {
    return input.split('\n');
};
exports.solvePart2 = solvePart2;
exports.default = {
    solvePart1: exports.solvePart1,
    solvePart2: exports.solvePart2,
};
//# sourceMappingURL=data:application/json;base64,