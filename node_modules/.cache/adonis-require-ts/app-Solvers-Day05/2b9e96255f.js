"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.solvePart2 = exports.solvePart1 = void 0;
const solvePart1 = async (input) => {
    const inputParsed = input.split('\n').filter((value) => value !== '');
    const coordinates = inputParsed
        .map((lineSegment) => {
        return lineSegment
            .split(' -> ')
            .map((lineSegment) => lineSegment.split(',').map((value) => parseInt(value)));
    })
        .filter((lineSegment) => {
        const points = lineSegment.flat(2);
        const startX = points[0];
        const startY = points[1];
        const endX = points[2];
        const endY = points[3];
        return startX === endX || startY === endY;
    });
    const sortedX = coordinates
        .flat()
        .map((coordinate) => {
        return coordinate[0];
    })
        .sort((a, b) => a - b);
    const sortedY = coordinates
        .flat()
        .map((coordinate) => {
        return coordinate[1];
    })
        .sort((a, b) => a - b);
    const maxX = sortedX[sortedX.length - 1] + 1;
    const maxY = sortedY[sortedY.length - 1] + 1;
    const filledArray = Array(maxY)
        .fill(undefined)
        .map((_row) => Array(maxX).fill(0));
    return (coordinates
        .reduce((diagram, lineSegment) => {
        const points = lineSegment.flat(2);
        const sortedX = [points[0], points[2]].sort((a, b) => a - b);
        const sortedY = [points[1], points[3]].sort((a, b) => a - b);
        const startX = sortedX[0];
        const endX = sortedX[1];
        const startY = sortedY[0];
        const endY = sortedY[1];
        const isVerticalLine = startX === endX;
        if (isVerticalLine) {
            return diagram.map((row, rowIndex) => {
                if (rowIndex >= startY && rowIndex <= endY) {
                    return row.map((column, colIndex) => {
                        if (colIndex >= startX && colIndex <= endX) {
                            return column + 1;
                        }
                        return column;
                    });
                }
                return row;
            });
        }
        return diagram.map((row, rowIndex) => {
            if (rowIndex === startY) {
                return row.map((column, colIndex) => {
                    if (colIndex >= startX && colIndex <= endX) {
                        return column + 1;
                    }
                    return column;
                });
            }
            return row;
        });
    }, filledArray)
        .flat()
        .filter((value) => value >= 2).length);
};
exports.solvePart1 = solvePart1;
const solvePart2 = async (input) => {
    return input.split('\n').filter((value) => value !== '');
};
exports.solvePart2 = solvePart2;
exports.default = {
    solvePart1: exports.solvePart1,
    solvePart2: exports.solvePart2,
};
//# sourceMappingURL=data:application/json;base64,