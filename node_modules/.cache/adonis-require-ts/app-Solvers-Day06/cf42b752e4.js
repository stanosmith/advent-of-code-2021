"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.day06Part2Process = exports.solvePart2 = exports.solvePart1 = void 0;
const solvePart1 = async (input, totalDays) => {
    if (!totalDays) {
        totalDays = 80;
    }
    let simulation = parseInput(input);
    for (let i = 0; i < totalDays; i++) {
        simulation = runLifecycle(simulation);
    }
    return simulation.length;
};
exports.solvePart1 = solvePart1;
function runLifecycle(ages) {
    for (let i = 0; i < ages.length; i++) {
        const age = ages[i];
        if (age === 0) {
            ages[i] = 6;
            ages.push(9);
        }
        else {
            ages[i] = age - 1;
        }
    }
    return ages;
}
const solvePart2 = async (input) => {
    return parseInput(input);
};
exports.solvePart2 = solvePart2;
const day06Part2Process = async (input) => {
    return await (0, exports.solvePart1)(input, 256);
};
exports.day06Part2Process = day06Part2Process;
function parseInput(input) {
    return input
        .split('\n')
        .filter((value) => value !== '')
        .join('')
        .split(',')
        .map((value) => parseInt(value));
}
exports.default = {
    solvePart1: exports.solvePart1,
    solvePart2: exports.solvePart2,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGF5MDYuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJEYXkwNi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBTyxNQUFNLFVBQVUsR0FBRyxLQUFLLEVBQUUsS0FBYSxFQUFFLFNBQWtCLEVBQUUsRUFBRTtJQUlwRSxJQUFJLENBQUMsU0FBUyxFQUFFO1FBQ2QsU0FBUyxHQUFHLEVBQUUsQ0FBQTtLQUNmO0lBRUQsSUFBSSxVQUFVLEdBQUcsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBQ2xDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxTQUFTLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDbEMsVUFBVSxHQUFHLFlBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQTtLQUN0QztJQUNELE9BQU8sVUFBVSxDQUFDLE1BQU0sQ0FBQTtBQUMxQixDQUFDLENBQUE7QUFiWSxRQUFBLFVBQVUsY0FhdEI7QUFFRCxTQUFTLFlBQVksQ0FBQyxJQUFJO0lBQ3hCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ3BDLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUNuQixJQUFJLEdBQUcsS0FBSyxDQUFDLEVBQUU7WUFDYixJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFBO1lBQ1gsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQTtTQUNiO2FBQU07WUFDTCxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQTtTQUNsQjtLQUNGO0lBQ0QsT0FBTyxJQUFJLENBQUE7QUFDYixDQUFDO0FBRU0sTUFBTSxVQUFVLEdBQUcsS0FBSyxFQUFFLEtBQWEsRUFBRSxFQUFFO0lBUWhELE9BQU8sVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFBO0FBQzFCLENBQUMsQ0FBQTtBQVRZLFFBQUEsVUFBVSxjQVN0QjtBQUVNLE1BQU0saUJBQWlCLEdBQUcsS0FBSyxFQUFFLEtBQWEsRUFBRSxFQUFFO0lBQ3ZELE9BQU8sTUFBTSxJQUFBLGtCQUFVLEVBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFBO0FBQ3JDLENBQUMsQ0FBQTtBQUZZLFFBQUEsaUJBQWlCLHFCQUU3QjtBQUVELFNBQVMsVUFBVSxDQUFDLEtBQUs7SUFDdkIsT0FBTyxLQUFLO1NBQ1QsS0FBSyxDQUFDLElBQUksQ0FBQztTQUNYLE1BQU0sQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsS0FBSyxLQUFLLEVBQUUsQ0FBQztTQUMvQixJQUFJLENBQUMsRUFBRSxDQUFDO1NBQ1IsS0FBSyxDQUFDLEdBQUcsQ0FBQztTQUNWLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUE7QUFDcEMsQ0FBQztBQUVELGtCQUFlO0lBQ2IsVUFBVSxFQUFWLGtCQUFVO0lBQ1YsVUFBVSxFQUFWLGtCQUFVO0NBQ1gsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBzb2x2ZVBhcnQxID0gYXN5bmMgKGlucHV0OiBzdHJpbmcsIHRvdGFsRGF5cz86IG51bWJlcikgPT4ge1xuICAvLyBpbnB1dCA9ICczLDQsMywxLDInXG5cbiAgLy8gUGFydCAxOiBIb3cgbWFueSBsYW50ZXJuZmlzaCB3b3VsZCB0aGVyZSBiZSBhZnRlciA4MCBkYXlzP1xuICBpZiAoIXRvdGFsRGF5cykge1xuICAgIHRvdGFsRGF5cyA9IDgwIC8vIFRlc3QgdmFsdWU6IDE4XG4gIH1cblxuICBsZXQgc2ltdWxhdGlvbiA9IHBhcnNlSW5wdXQoaW5wdXQpXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdG90YWxEYXlzOyBpKyspIHtcbiAgICBzaW11bGF0aW9uID0gcnVuTGlmZWN5Y2xlKHNpbXVsYXRpb24pXG4gIH1cbiAgcmV0dXJuIHNpbXVsYXRpb24ubGVuZ3RoXG59XG5cbmZ1bmN0aW9uIHJ1bkxpZmVjeWNsZShhZ2VzKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYWdlcy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGFnZSA9IGFnZXNbaV1cbiAgICBpZiAoYWdlID09PSAwKSB7XG4gICAgICBhZ2VzW2ldID0gNlxuICAgICAgYWdlcy5wdXNoKDkpIC8vIEhBQ0s6IFB1c2hpbmcgOSwgaW5zdGVhZCBvZiA4LCBiZWNhdXNlIGl0IGdldHMgZGVjcmVtZW50ZWQgYXQgdGhlIGVuZCBvZiB0aGUgbG9vcFxuICAgIH0gZWxzZSB7XG4gICAgICBhZ2VzW2ldID0gYWdlIC0gMVxuICAgIH1cbiAgfVxuICByZXR1cm4gYWdlc1xufVxuXG5leHBvcnQgY29uc3Qgc29sdmVQYXJ0MiA9IGFzeW5jIChpbnB1dDogc3RyaW5nKSA9PiB7XG4gIC8vIFBhcnQgMjogSG93IG1hbnkgbGFudGVybmZpc2ggd291bGQgdGhlcmUgYmUgYWZ0ZXIgMjU2IGRheXM/XG5cbiAgLy8gVE9ETzogVGhpcyBpcyB0aGUgZmlyc3QgdGltZSBJJ3ZlIG5lZWRlZCB0byBoYXZlIGEgcHJvY2VzcyBydW4gaW4gdGhlIGJhY2tncm91bmRcbiAgLy8gICBUaGUgYmVzdCB3YXkgdG8gc29sdmUgdGhpcyBpcyBpbiB0aGUgRGF5c0NvbnRyb2xsZXIuIFRoZXJlIGlzIGEgY29tbWVudCBub3RpbmcgdGhlXG4gIC8vICAgbmVlZCB0byBsb29wIHRocm91Z2ggdGhlIHBhcnRzIGluc3RlYWQgb2YgaW1wZXJhdGl2ZWx5IHByb2Nlc3NpbmcgZWFjaCBwYXJ0LiBUaGlzXG4gIC8vICAgd2F5IHRoZSBzb2x2ZSB3aWxsIG9ubHkgYmUgcmVxdWVzdGVkIGlmIHRoZXJlIGlzbid0IGFscmVhZHkgYW4gYW5zd2VyLlxuXG4gIHJldHVybiBwYXJzZUlucHV0KGlucHV0KVxufVxuXG5leHBvcnQgY29uc3QgZGF5MDZQYXJ0MlByb2Nlc3MgPSBhc3luYyAoaW5wdXQ6IHN0cmluZykgPT4ge1xuICByZXR1cm4gYXdhaXQgc29sdmVQYXJ0MShpbnB1dCwgMjU2KVxufVxuXG5mdW5jdGlvbiBwYXJzZUlucHV0KGlucHV0KSB7XG4gIHJldHVybiBpbnB1dFxuICAgIC5zcGxpdCgnXFxuJylcbiAgICAuZmlsdGVyKCh2YWx1ZSkgPT4gdmFsdWUgIT09ICcnKVxuICAgIC5qb2luKCcnKVxuICAgIC5zcGxpdCgnLCcpXG4gICAgLm1hcCgodmFsdWUpID0+IHBhcnNlSW50KHZhbHVlKSlcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBzb2x2ZVBhcnQxLFxuICBzb2x2ZVBhcnQyLFxufVxuIl19